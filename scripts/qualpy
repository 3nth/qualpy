#!/usr/bin/env python
# encoding: utf-8
"""
qualy.py

Created by Derek Flenniken on 11/1/2013.

Copyright (c) 2013 Center for Imaging of Neurodegenerative Diseases
"""
import argparse
from os import path
import logging
import os
import csv
from StringIO import StringIO

from qualpy import Qualtrics

from bs4 import BeautifulSoup
from jinja2 import Environment, PackageLoader
import requests

logging.basicConfig(level=logging.DEBUG)

logger = logging.getLogger("qualpy")
ch = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
ch.setFormatter(formatter)
logger.addHandler(ch)


def document(args):
    q = Qualtrics(args.auth)
    
    env = Environment(loader=PackageLoader("qualpy", ""))
    template = env.get_template("/Users/derek/projects/qualpy/qualpy/DocumentationTemplate.html")
    surveys = q.get_active_surveys()
    for survey in surveys:
        survey['TableName'] = surveyname2tablename(survey['SurveyName'])
        questions = parse_survey_questions(survey)
        survey['Questions'] = questions

    f = open(args.dst, 'wt')
    f.write(template.render(surveys=surveys))
    f.close()
    
def parse_survey_questions(survey):
    questions = []

    xml = BeautifulSoup(survey, 'xml')
    for q in xml.Questions.find_all('Question'):
        question = parse_question(q)
        questions.append(question)
    return questions

def parse_question(q):

    choices = []
    if q.Choices:
        for choice in q.Choices.find_all('Choice'):
            choices.append({
                "ID": choice['ID'], 
                "Recode": choice['Recode'], 
                "Description": choice.Description
            })

    answers = []
    if q.Answers:
        for answer in q.Answers.find_all('Answer'):
            answers.append({
                "ID": answer['ID'], 
                "Recode": answer['Recode'], 
                "Description": answer.Description
            })
            
    return {
        "ID": q['QuestionID'], 
        "Type": q.Type, 
        "Text": q.QuestionText, 
        "Choices": choices, 
        "Answers": answers
    }

def count_words():
    q = Qualtrics(auth['qualtrics_user'], auth['qualtrics_token'])
    for survey in q.get_surveys():
        if survey['SurveyStatus'] is not None: # == u'Active':
            questions = get_survey_questions(survey['SurveyID'])
            word_count = 0
            for q in questions:
                question = questions[q]
                q_count = len(question['Text'].split()) if question['Text'] else 0
                word_count += q_count
                for answer in question['Answers']:
                    a_count = len(answer['Description'].split()) if answer['Description'] else 0
                    word_count += a_count
                for choice in question['Choices']:
                    c_count = len(choice['Description'].split()) if choice['Description'] else 0
                    word_count += c_count

            print "%s: %s" % (survey['SurveyName'], word_count)

def download(args):
    q = Qualtrics(args.auth)
    
    if not path.exists(args.dst):
        os.makedirs(args.dst)

    if False: #args.survey_id:
        logger.info("Downloading {0}".format(survey_id))
        data = q.get_survey_data(survey['SurveyID'])
        tablename = surveyname2tablename(survey['SurveyName'])
        downloadpath = path.join(args.dst, tablename + '.csv')
        write_csv(data, downloadpath)
    
    else:
        surveys = q.get_active_surveys()
        for survey in surveys:
            logger.info('Downloading "%s" ...' % survey['SurveyName'])
            data = q.get_survey_data(survey['SurveyID'])
            tablename = surveyname2tablename(survey['SurveyName'])
            downloadpath = path.join(args.dst, tablename + '.csv')
            write_csv(data, downloadpath)
        panels = q.get_panels()
        for panel in panels:
            logger.info('Downloading "%s" ...' % panel['Name'])
            data = q.get_panel_data(panel['PanelID'])
            tablename = surveyname2tablename(panel['Name'])
            downloadpath = path.join(args.dst, tablename + '.csv')
            write_csv(data, downloadpath)

def surveyname2tablename(surveyname):
    return surveyname.replace(' ', '').replace('-', '_')

def write_csv(data, filepath):
    f = open(filepath, 'wb')
    writer = csv.writer(f)
    writer.writerows(data)
    f.close()
    
def list():
    q = Qualtrics(args.auth)
    surveys = q.get_active_surveys()
    for survey in surveys:
        print "{0}: {1}".format(survey['SurveyID'], survey['SurveyName'])

if __name__ == "__main__":
    parser = argparse.ArgumentParser("qualpy")
    parser.add_argument('--auth', action="store")
    parser.add_argument('action', action="store", choices=('document', 'download', 'list'))
    parser.add_argument('dst', action="store")
    args = parser.parse_args()

    if args.action == 'document':
        document(args)
    elif args.action == 'download':
        download(args)
    elif args.action == 'list':
        list(args)

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4